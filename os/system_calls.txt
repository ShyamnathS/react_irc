1. Implementing LS System Call

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>

int main() {
    struct dirent *dir;
    DIR *d = opendir(".");
    if (d) {
        while ((dir = readdir(d)) != NULL) {
            printf("%s\n", dir->d_name);
        }
        closedir(d);
    }
    return 0;
}


2. Implementing Fork System Call

#include <stdio.h>
#include <unistd.h>

int main() {
    pid_t child_pid = fork();
    if (child_pid == 0) {
        printf("Child process\n");
    } else if (child_pid > 0) {
        printf("Parent process\n");
    } else {
        fprintf(stderr, "Fork failed\n");
        return 1;
    }
    return 0;
}


3. Implementing Open System Call

#include <stdio.h>
#include <fcntl.h>

int main() {
    int file_descriptor = open("file.txt", O_CREAT | O_WRONLY | O_TRUNC, 0644);
    if (file_descriptor < 0) {
        fprintf(stderr, "Error opening file\n");
        return 1;
    }

    write(file_descriptor, "Hello, this is a test.\n", 23);
    close(file_descriptor);
    return 0;
}


4. Implementing Write System Call

#include <stdio.h>
#include <unistd.h>

int main() {
    int file_descriptor = creat("file.txt", 0644);
    if (file_descriptor < 0) {
        fprintf(stderr, "Error creating file\n");
        return 1;
    }

    write(file_descriptor, "Hello, this is a test.\n", 23);
    close(file_descriptor);
    return 0;
}


5. Implementing Read System Call

#include <stdio.h>
#include <unistd.h>

#define BUFFER_SIZE 1024

int main() {
    int file_descriptor = open("file.txt", O_RDONLY);
    if (file_descriptor < 0) {
        fprintf(stderr, "Error opening file\n");
        return 1;
    }

    char buffer[BUFFER_SIZE];
    int bytes_read = read(file_descriptor, buffer, BUFFER_SIZE - 1);
    if (bytes_read < 0) {
        fprintf(stderr, "Error reading file\n");
        return 1;
    }
    buffer[bytes_read] = '\0';

    printf("Read from file: %s\n", buffer);

    close(file_descriptor);
    return 0;
}
